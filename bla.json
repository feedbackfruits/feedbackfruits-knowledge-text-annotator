{"concepts":[{"text":"Schema","relevance":0.97938,"dbpedia_resource":"http://dbpedia.org/resource/Schema"},{"text":"Transaction cost","relevance":0.908662,"dbpedia_resource":"http://dbpedia.org/resource/Transaction_cost"},{"text":"Data management","relevance":0.876526,"dbpedia_resource":"http://dbpedia.org/resource/Data_management"},{"text":"XML schema","relevance":0.818219,"dbpedia_resource":"http://dbpedia.org/resource/XML_schema"},{"text":"Contract","relevance":0.80828,"dbpedia_resource":"http://dbpedia.org/resource/Contract"},{"text":"XML","relevance":0.769426,"dbpedia_resource":"http://dbpedia.org/resource/XML"},{"text":"Data","relevance":0.7626,"dbpedia_resource":"http://dbpedia.org/resource/Data"},{"text":"Proof of concept","relevance":0.75238,"dbpedia_resource":"http://dbpedia.org/resource/Proof_of_concept"}],"namedEntities":[{"@URI":"http://dbpedia.org/resource/XML","@support":"8252","@types":"","@surfaceForm":"XML","@offset":"3159","@similarityScore":"1.0","@percentageOfSecondRank":"0.0"},{"@URI":"http://dbpedia.org/resource/XML_schema","@support":"259","@types":"","@surfaceForm":"xml schema","@offset":"4897","@similarityScore":"1.0","@percentageOfSecondRank":"2.104094731675269E-72"},{"@URI":"http://dbpedia.org/resource/Data_management","@support":"342","@types":"","@surfaceForm":"data management","@offset":"7210","@similarityScore":"1.0","@percentageOfSecondRank":"0.0"},{"@URI":"http://dbpedia.org/resource/Transaction_cost","@support":"343","@types":"","@surfaceForm":"transaction cost","@offset":"8312","@similarityScore":"1.0","@percentageOfSecondRank":"0.0"},{"@URI":"http://dbpedia.org/resource/Transaction_cost","@support":"343","@types":"","@surfaceForm":"transaction costs","@offset":"9486","@similarityScore":"1.0","@percentageOfSecondRank":"0.0"},{"@URI":"http://dbpedia.org/resource/XML_schema","@support":"259","@types":"","@surfaceForm":"xml schema","@offset":"10355","@similarityScore":"1.0","@percentageOfSecondRank":"2.104094731675269E-72"}],"method":"POST","body":"SyncForce x Blockchain Proof of Concept Summary, Analysis and Advises Kasper Hämäläinen / 3203328 11.01.2019 Table of Content Background 1 Introduction 2 Proof Of Concept 2 Concept 2 Components and used technologies 3 Ethereum 3 Mini-Byzos 3 Reading data from Blockchain 6 Benefits and challenges 7 Benefits 7 Limitation and needed extension 8 Using Public Ethereum network 9 Toward Byzos network Conclusion 10 11 Background This document is part of Open Innovation- course and project “SyncForce x Blockchain” at Fontys University of Applied Sciences. Main goal of the project is to do research and give advices how SyncForce could benefit from Blockchain technology. Introduction Goal of this document is to provide summary of the functionality within created PoC and what benefits it could give for current processes in SyncForce. Document also states possible future benefits and advices what could be achieved by extending functionality of the PoC and by using Blockchain in general. 1 Proof Of Concept Concept Concept for the PoC is based on identified challenge within Byzos: “​ Comparing, retrieving and managing different versions and schemas of released product information is complicated with Byzos, because versioning is distributed to different schemas. ​ ” Core idea of the created PoC is that Byzos continue working as it is currently functioning; validating, transforming and syndicating xml-schemas to the wanted endpoints. Blockchain is implemented in a way, that in wanted step, schema is hashed and it is stored to the Blockchain via Smart Contract. From Blockchain, this hash of the product data can be retrieved and from it can be verified authenticity of the product data, as it was in time of the storing. 2 Components and used technologies Ethereum As identified from the outcome of Byzos Concept document, Ethereum was chosen to use in this project. To setup local Ethereum network, Ganache software from Truffle Suite is used. Mini-Byzos To mimic functionality of the Byzos, software was developed by using C# and Nethereum- library. Usage of these technologies was requirement from the project stakeholder, because Byzos is written in C#. Nethereum is C# compatible library, which establish communication with Ethereum network. Functionality Client Registry Each client has public address which correspond addresses in Ethereum network, created in Ganache. Each address has corresponding password, respecting public-private key cryptography used in Ethereum. Client address is used to link ownership of Trade Items to the clients and password is used to sign the transaction and when schema is hashed. This approach adds an extra layer of security to the process. For future, this client registry should be stored in external service, like Azure Key Vault. 3 Trade Item Registry To mimic original Byzos functionality xml-schemas are already “transformed” and stored in local drive. Software has a function, which reads folder structure and creates needed object, which can then be stored to Ethereum. Data from folder structure: 1. requestGuid 2. clientID 3. cid 4. transactionGuid Data from xml- file: ● schemaVersion ● dataHash (XML- file is hashed by using HMAC SHA256) Object: Storing to the Blockchain Using Nethereum- library object is stored to Ethereum via Smart Contract. This happens by calling smart contract address and functions in it. Smart Contracts are deployed to the Ethereum network by using Truffle- framework from Truffle Suite. Ethereum Smart Contracts are written in Solidity, which is Ethereum’s own programming language. In the smart contract is needed functions and models to store Trade Item and related schemas. Because in Ethereum eventually all data is in bytes level writing and storing data in bytes is recommended. With this approach, unnecessary, slow and costly encoding and decoding can be avoided. During the storing (making transaction) needed data conversions are done in software by Nethereum- library where these data converting functionalities are build-in. 4 It is notable, that because of the current limitation of Ethereum, bytes32 is largest supported length in bytes variables and because of this schema hash is splitted in two parts. Using string- data types in Solidity is not recommended, but in sake of clarity for this PoC, string was used. Models in Smart Contract: New Trade Item function in Smart Contract: 5 Get schema function in Smart Contract: More details of this transaction functionality can be seen from the project files itself. Reading data from Blockchain To retrieve and compare hash of stored Trade Items light web service was created by using ReactJS. To establish connection with Ethereum network Web3.js library is used. This library is provided by Ethereum. Web service has table, from which all stored Trade Item schemas and information of the it can be seen. 6 Web service allows user to upload xml-schema at the browser and then compare hash of it against stored hash in Blockchain. Benefits and challenges Benefits With created PoC and within functionality it offers SyncForce can; ● Verify and proof that published and stored schema in Azure servers matches schema which was originally published in that time. This improves data transparency and authenticity. ● Byzos can gross check hash in Blockchain with the possible new schema version. If hash matches, there is no need to store new schema version or there is mistake in process. This endorse process functionality and minimize data redundancy in Azure. ● SyncForce can reproduce once executed request route and related schema transformations to confirm functionality of Byzos. This improves data quality and accuracy. ● Published Trade Items are linked to the each customer, which improves ownership authenticity and can be used to verify intellectual property. ● Stored items in Blockchain can be seen as a “absolute” truth of published trade items. Using this information can be created new models and ways to manage published data. ● Blockchain is immutable audit log of published schemas, it increases transparency and trust in the process. Identified benefits are notable additions to the current process and can increase customer trust and can improve Byzos service promise. 7 Needed addition During the project phase of designing concept main idea was to encode, encrypt and store schema versions as a whole to Ethereum. This plan hit the wall after testing and more thorough research. In Ethereum is maximum Gas which can be used to execute transaction; current xml-schemas, as they are, or encoded are too big to store. So, limitation with the created PoC is that Blockchain doesn’t actual hold the actual product data, only parts of it, from which can be identified which Trade Item it is. Addition would be also store endpoint location of the product data itself, which currently is stored in Azure. This could have been easily implemented to the PoC, but was seen as an unnecessary addition. With this addition, web and other services could use Blockchain as main source of product data and to get necasserty info of where to pull “rest of the data”. This itself, is already a good extension and advice would be to explore new models of data management and distribution around it. To extend by storing more, actual product data as an individual variables in to Blockchain in un advisable, taken into account nature of the Blockchain, which is that it is not meant to be data storage for large files or large data structures. It is advisable that SyncForce carefully think what data is needed to benefit from Blockchain and that stored data stream doesn’t increase to unmanageable size. Using Public Ethereum network It is notable, that benefits listed earlier are identified as in concept level and more research has to be done, so that this concept and it benefits can be scaled to the production. Open question is solution behind production version of Ethereum network; How costly is to run private Ethereum network and will usage of it advocate benefits of Blockchain? Could there be permissioned consortium network? Will benefits of using public Ethereum network overcome overhead of expenses related to the transactions? Usage of public Ethereum network can be seen as a one solution for the production. Downside of this is that each transaction cost Gas, which is paid in ETH, cryptocurrency used in Ethereum network. To get overview, what would costs to use public Ethereum network following calculations were made (based on ​ ETH Gas station​ calculator 11.01.2019): 8 Action Gas used Price in ETH Price in € Smart Contract creation (one time or update) 1 816 539 0.0054496 0.69755 Store one new Trade Item CID or Schema 220 699 0.0005484 0.0691 Based on those transaction fees: Amount of stored schemas: Cost € 10 000 691,00 € 50 000 3 455,00 € 1 000 000 69 100,00 € Currently, in one month thru Byzos is processed around 20 000 requests and inside those are possible multiple schemas (one estimate was around 100 000/month). Addition to this is possible import requests. So, right now; no brainer, it is not advisable to use public Ethereum to store ​ all ​ schemas. Notable, is that in case of Ethereum, they are moving to Proof of Stake consensus protocol, which will decrease amount of transaction fees in public network. Also, by tweaking the smart contract struct, cost of transaction can be lowered (usage of strings is costly, minimize data needed to store etc.). Also, it is notable, that these transaction costs can be avoided when using private or permissioned network. Then the question will be, how much it will cost to run this kind of network and “​ will usage of it advocate benefits of Blockchain”, ​ as stated before. Toward Byzos network As identified during this project, Byzos has big plans for the future as a main data distribution service and as CEO of the company stated his future view: “​ Every webshop will pull product related data from Byzos network ​ ”. Besides created PoC and benefits identified around it following advices are stated: ● Only Byzos- format of the schema can be saved to the public Ethereum network, lowering the total costs. This stored data in public network would act as “absolute truth”- (or “single-source of truth”), respecting characterics of Blockchain. Addition to current data struct should also be stored URI for xml-schema endpoint, from where actual product data 9 can be retrieved. This would reduce need of intermediaries and with model of controlling read access of stored schemas, there can be created new business models, like selling access to the 3rd party marketplaces. Rest of the schemas can be saved to the permissioned or in to private network, if it is seen needed. Afterall, from Byzos-schema can be reproduced all other needed schema transformations, and from it compare hash when it is necessary. ● To benefit from the concept of decentralization and to improved transparency, data availability and data authenticity decentralised data storage could be used besides Blockchain. For this interesting concepts are IPFS, BigchainDB and Storj. With solution like this, also larger product related data can be stored in decentralized way, like product pictures. With the usage of decentralized data storage could eventually be removed need of the Azure. ● Open discussion about permissioned consortium Blockchain network should be established in the industry and partner companies. With shared Blockchain network, costs of running it can be minimized and benefits of decentralization seen in bigger picture. Conclusion Created PoC in this project is a solid proof of how SyncForce can benefit from Blockchain and how it could be implemented to the existing processes. Open question will be solution and expenses related to the type of network. It is advisable that usage of Blockchain is explored in bigger picture, because it can be seen as a main network for distribution and managing published product data. With possible new model and benefits with it possible overhead cost can be cut off. What comes to the characteristics of Blockchain as a immutable, incorruptible and decentralized data storage can it be seen as a crucial addition in near future to the Byzos and services offered by SyncForce. In the nature of the industry of good manufacturing business, where managing and publishing product data is essential part should service promise be transparent and reliable - this promise is beneficial in eyes of clients and the end customer of the product. 10","query":{"concepts":"","namedEntities":""}}